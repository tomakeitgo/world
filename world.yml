AWSTemplateFormatVersion: 2010-09-09
Parameters:
  VersionId:
    Type: String
    Description: zip file version.
Resources:
  #S3 Bucket used to store the binaries for deployment.
  DeploymentBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Prefix: "*"
            Status: Enabled
            NoncurrentVersionExpiration:
              NoncurrentDays: 1
              NewerNoncurrentVersions: 3

  SimpleHeaderAuthorizerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  SimpleHeaderAuthorizerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: java21
      Handler: com.tomakeitgo.world.SimpleHeaderAuthorizerHandler::handleRequest
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: "world.zip"
        S3ObjectVersion: !Ref VersionId
      Timeout: 900
      MemorySize: 128
      Role: !GetAtt
        - HelloWorldLambdaRole
        - Arn

  SimpleHeaderAuthorizerLambdaLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref SimpleHeaderAuthorizerLambdaRole
      PolicyName: GrantLoggingAccess
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: logs:CreateLogGroup
            Resource: !Join
              - ''
              - - 'arn:aws:logs:us-west-2:'
                - !Ref AWS::AccountId
                - ':*'
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Join
              - ''
              - - 'arn:aws:logs:us-west-2:'
                - !Ref AWS::AccountId
                - ':log-group:/aws/lambda/'
                - !Ref SimpleHeaderAuthorizerLambda
                - ':*'
  SimpleHeaderAuthorizerLambdaAuthorizerCall:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SimpleHeaderAuthorizerLambda
      Action: lambda:InvokeFunction
      Principal: 'apigateway.amazonaws.com'
      #    --source-arn "arn:aws:execute-api:us-west-2:123456789012:api-id/authorizers/authorizer-id"
      SourceArn: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref API
          - '/authorizers/*'

  HelloWorldLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  HelloWorldLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: java21
      Handler: com.tomakeitgo.world.HelloWorldHandler::handleRequest
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: "world.zip"
        S3ObjectVersion: !Ref VersionId
      Timeout: 900
      MemorySize: 128
      Role: !GetAtt
        - HelloWorldLambdaRole
        - Arn

  HelloWorldLambdaLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref HelloWorldLambdaRole
      PolicyName: GrantLoggingAccess
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: logs:CreateLogGroup
            Resource: !Join
              - ''
              - - 'arn:aws:logs:us-west-2:'
                - !Ref AWS::AccountId
                - ':*'
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Join
              - ''
              - - 'arn:aws:logs:us-west-2:'
                - !Ref AWS::AccountId
                - ':log-group:/aws/lambda/'
                - !Ref HelloWorldLambda
                - ':*'

  HelloWorldLambdaAllowApiCall:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref HelloWorldLambda
      Action: lambda:InvokeFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref API
          - '/*/*/*'

  CreatePlayerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  CreatePlayerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: java21
      Handler: com.tomakeitgo.world.handler.CreatePlayerHandler::handleRequest
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: "world.zip"
        S3ObjectVersion: !Ref VersionId
      Timeout: 900
      MemorySize: 128
      Role: !GetAtt CreatePlayerLambdaRole.Arn
      Environment:
        Variables:
          PlayerTableName: !ImportValue 'world-data-prod-PlayerTableName'
          ShipTableName: !ImportValue 'world-data-prod-ShipTableName'
          ShipLocationTable: !ImportValue 'world-data-prod-ShipLocationTableName'

  CreatePlayerLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref CreatePlayerLambdaRole
      PolicyName: GrantLoggingAccess
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: logs:CreateLogGroup
            Resource: !Join
              - ''
              - - 'arn:aws:logs:us-west-2:'
                - !Ref AWS::AccountId
                - ':*'
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Join
              - ''
              - - 'arn:aws:logs:us-west-2:'
                - !Ref AWS::AccountId
                - ':log-group:/aws/lambda/'
                - !Ref CreatePlayerLambda
                - ':*'
          - Effect: Allow
            Action:
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:GetItem"
              - "dynamodb:PutItem"
              - "dynamodb:DeleteItem"
            Resource:
              - !ImportValue 'world-data-prod-PlayerTableArn'
              - !ImportValue 'world-data-prod-ShipTableArn'
              - !ImportValue 'world-data-prod-ShipLocationTableArn'

  CreatePlayerLambdaAllowApiCall:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreatePlayerLambda
      Action: lambda:InvokeFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref API
          - '/*/*/*'

  MoveShipLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  MoveShipLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: java21
      Handler: com.tomakeitgo.world.handler.MoveShipHandler::handleRequest
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: "world.zip"
        S3ObjectVersion: !Ref VersionId
      Timeout: 900
      MemorySize: 128
      Role: !GetAtt MoveShipLambdaRole.Arn
      Environment:
        Variables:
          PlayerTableName: !ImportValue 'world-data-prod-PlayerTableName'
          ShipTableName: !ImportValue 'world-data-prod-ShipTableName'
          ShipLocationTable: !ImportValue 'world-data-prod-ShipLocationTableName'

  MoveShipLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref MoveShipLambdaRole
      PolicyName: GrantLoggingAccess
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: logs:CreateLogGroup
            Resource: !Join
              - ''
              - - 'arn:aws:logs:us-west-2:'
                - !Ref AWS::AccountId
                - ':*'
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Join
              - ''
              - - 'arn:aws:logs:us-west-2:'
                - !Ref AWS::AccountId
                - ':log-group:/aws/lambda/'
                - !Ref MoveShipLambda
                - ':*'
          - Effect: Allow
            Action:
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:GetItem"
              - "dynamodb:PutItem"
              - "dynamodb:DeleteItem"
            Resource:
              - !ImportValue 'world-data-prod-PlayerTableArn'
              - !ImportValue 'world-data-prod-ShipTableArn'
              - !ImportValue 'world-data-prod-ShipLocationTableArn'
              - !Join
                - ''
                - - !ImportValue 'world-data-prod-ShipLocationTableArn'
                  - '/index/FindShip'


  MoveShipLambdaAllowApiCall:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MoveShipLambda
      Action: lambda:InvokeFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref API
          - '/*/*/*'


  API:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: WorldAPI
      ProtocolType: HTTP

  APIAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: LambdaAuthorizer
      ApiId: !Ref API
      IdentitySource:
        - '$request.header.magic-token'
      AuthorizerType: REQUEST
      AuthorizerPayloadFormatVersion: 2.0
      EnableSimpleResponses: True
      AuthorizerUri: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt SimpleHeaderAuthorizerLambda.Arn
          - '/invocations'
      AuthorizerResultTtlInSeconds: 500

  APIDomain:
    Type: 'AWS::ApiGatewayV2::DomainName'
    Properties:
      DomainName: api.tomakeitgo.com
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: !Join
            - ''
            - - 'arn:aws:acm:us-west-2:'
              - !Ref AWS::AccountId
              - ':certificate/251c8e1b-2e7f-495b-a869-828f670587d7'

  APIV1Deployment:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref API
      AutoDeploy: true
      StageName: v1

  APIMapping:
    Type: 'AWS::ApiGatewayV2::ApiMapping'
    DependsOn: APIDomain
    Properties:
      DomainName: api.tomakeitgo.com
      ApiId: !Ref API
      Stage: !Ref APIV1Deployment

  APITestIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref API
      Description: "Test Integration to the hello world lambda"
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      IntegrationUri: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt HelloWorldLambda.Arn
          - /invocations
      PayloadFormatVersion: 2.0

  APITestRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref API
      RouteKey: "GET /test"
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref APIAuthorizer
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref APITestIntegration

  CreatePlayerIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref API
      Description: "Test Integration to the hello world lambda"
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      IntegrationUri: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt CreatePlayerLambda.Arn
          - /invocations
      PayloadFormatVersion: 2.0

  CreatPlayerRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref API
      RouteKey: "POST /player"
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref APIAuthorizer
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref CreatePlayerIntegration

  MoveShipIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref API
      Description: "Test Integration to the hello world lambda"
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      IntegrationUri: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt MoveShipLambda.Arn
          - /invocations
      PayloadFormatVersion: 2.0

  MoveShipRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref API
      RouteKey: "POST /move-ship"
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref APIAuthorizer
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref MoveShipIntegration

Outputs:
  DeploymentBucketRef:
    Value: !Ref DeploymentBucket